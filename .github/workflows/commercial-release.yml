name: Commercial Release Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - 'preview'
          - 'release'

jobs:
  validate-clean-room:
    name: Validate Clean-Room Isolation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Verify No Reference Code Dependencies
        run: |
          echo "=== Checking for reference code contamination ==="

          # Check that commercial code doesn't import from reference
          if grep -r "reference::" commercial/ --include="*.rs" 2>/dev/null; then
            echo "ERROR: Commercial code imports from reference module"
            exit 1
          fi

          # Check Cargo.toml doesn't reference the reference crate
          if grep -r "path.*reference" commercial/ --include="Cargo.toml" 2>/dev/null; then
            echo "ERROR: Commercial Cargo.toml references reference code"
            exit 1
          fi

          echo "✓ No reference code dependencies found"

      - name: Verify Clean-Room Markers
        run: |
          echo "=== Verifying clean-room implementation markers ==="

          # Check for clean-room header in DWT implementation
          if ! grep -q "Clean-room implementation" commercial/jpegxs-core-clean/src/dwt.rs; then
            echo "ERROR: Missing clean-room marker in DWT implementation"
            exit 1
          fi

          echo "✓ Clean-room markers verified"

  build-commercial:
    name: Build Commercial Artifacts
    needs: validate-clean-room
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact: jpegxs-linux-x64
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact: jpegxs-macos-x64
          - target: aarch64-apple-darwin
            os: macos-14
            artifact: jpegxs-macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact: jpegxs-windows-x64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build Commercial Binary
        run: |
          cd commercial/jpegxs-core-clean
          cargo build --release --target ${{ matrix.target }}

          # Build CLI with commercial backend only
          cd ../../crates/jpegxs-cli
          cargo build --release --target ${{ matrix.target }} --features commercial-only

      - name: Package Commercial Artifact
        shell: bash
        run: |
          mkdir -p dist/${{ matrix.artifact }}

          # Copy binary
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/jpegxs.exe dist/${{ matrix.artifact }}/
          else
            cp target/${{ matrix.target }}/release/jpegxs dist/${{ matrix.artifact }}/
          fi

          # Copy legal documents
          cp LICENSE dist/${{ matrix.artifact }}/
          cp COMMERCIAL_LICENSE.md dist/${{ matrix.artifact }}/
          cp PATENT_NOTICE.md dist/${{ matrix.artifact }}/
          cp COMPLIANCE_REPORT.md dist/${{ matrix.artifact }}/

          # Create manifest
          cat > dist/${{ matrix.artifact }}/MANIFEST.txt << EOF
          JPEG XS Commercial Release
          Version: ${{ github.event.inputs.version }}
          Build Date: $(date -u +%Y-%m-%d)
          Target: ${{ matrix.target }}
          Clean-Room Implementation: YES
          Reference Code Included: NO
          Patent License Required: YES (See PATENT_NOTICE.md)
          EOF

      - name: Verify No Reference Code in Artifact
        shell: bash
        run: |
          echo "=== Scanning for reference code contamination ==="

          # Check binary doesn't contain reference symbols
          if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
            if strings dist/${{ matrix.artifact }}/jpegxs* | grep -q "reference_implementation\|fraunhofer\|intopix"; then
              echo "ERROR: Binary contains reference code symbols"
              exit 1
            fi
          fi

          echo "✓ No reference code found in artifact"

      - name: Generate SBOM
        shell: bash
        run: |
          # Install cargo-sbom if needed
          if ! command -v cargo-sbom &> /dev/null; then
            cargo install cargo-sbom
          fi

          # Generate SBOM
          cd commercial/jpegxs-core-clean
          cargo sbom > ../../dist/${{ matrix.artifact }}/sbom.json

          echo "✓ SBOM generated"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}-${{ github.event.inputs.version }}
          path: dist/${{ matrix.artifact }}

  create-release:
    name: Create Commercial Release
    needs: build-commercial
    runs-on: ubuntu-latest
    if: github.event.inputs.release_type == 'release'

    steps:
      - uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create Release Archives
        run: |
          cd release-artifacts
          for dir in */; do
            tar czf "${dir%/}.tar.gz" "$dir"
            zip -r "${dir%/}.zip" "$dir"
          done

      - name: Create Release Notes
        run: |
          cat > RELEASE_NOTES.md << EOF
          # JPEG XS Commercial Release ${{ github.event.inputs.version }}

          ## 🚀 Clean-Room Commercial Implementation

          This release contains the commercial-grade JPEG XS codec implementation built entirely from clean-room code.

          ### ⚖️ Licensing

          - **Code License**: Dual-licensed (Non-commercial free / Commercial paid)
          - **Patent License**: Required separately from Vectis IP
          - **Support**: Available with commercial license tiers

          ### 📦 Package Contents

          - \`jpegxs\` - Commercial JPEG XS encoder/decoder binary
          - \`LICENSE\` - Dual licensing terms
          - \`COMMERCIAL_LICENSE.md\` - Commercial license agreement
          - \`PATENT_NOTICE.md\` - Essential patent requirements
          - \`COMPLIANCE_REPORT.md\` - ISO/IEC 21122-1:2024 compliance
          - \`MANIFEST.txt\` - Build information
          - \`sbom.json\` - Software Bill of Materials

          ### ⚠️ Important Notice

          **Patent License Required**: This software implements the JPEG XS standard which is covered by essential patents. Commercial use requires a separate patent license from the JPEG XS patent pool administered by Vectis IP.

          ### 🛡️ Clean-Room Guarantee

          This release contains NO derivative code from reference implementations. Built entirely from ISO/IEC 21122-1:2024 specification.

          ### 📞 Commercial Licensing

          For commercial licensing inquiries:
          - Email: licensing@jpegxs-commercial.com
          - Include your use case and deployment scale

          ### ✅ Compliance

          - ISO/IEC 21122-1:2024 compliant
          - Supports Main Profile Level 2
          - Bit depths: 8-16 bits
          - Color spaces: RGB, YUV 4:4:4, 4:2:2, 4:2:0
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Commercial Release ${{ github.event.inputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'preview' }}
          files: |
            release-artifacts/*.tar.gz
            release-artifacts/*.zip

  notify:
    name: Release Notification
    needs: create-release
    runs-on: ubuntu-latest
    if: github.event.inputs.release_type == 'release'

    steps:
      - name: Send Release Notification
        run: |
          echo "Commercial Release ${{ github.event.inputs.version }} created successfully"
          echo "Download at: https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.version }}"
